import sys
import os
import subprocess
import requests
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QPushButton,
    QLabel, QListWidget, QListWidgetItem, QStackedWidget, QCheckBox,
    QMessageBox, QLineEdit, QDialog
)
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QPixmap, QFont

# === CONFIGURATION DE MISE √Ä JOUR ===
VERSION_ACTUELLE = "1.0.0"
VERSION_URL = "https://raw.githubusercontent.com/crapulebtw/crapule-optimisation/main/version.txt"
EXE_URL = "https://github.com/crapulebtw/crapule-optimisation/releases/latest/download/CrapuleOptimisation.exe"
NOM_EXE = "CrapuleOptimisation.exe"

class CustomWindow(QMainWindow):
    def __init__(self):
        super().__init__()

        # === FEN√äTRE ===
        self.setWindowFlags(Qt.FramelessWindowHint)
        self.setAttribute(Qt.WA_TranslucentBackground)
        self.setGeometry(100, 100, 1000, 600)
        self.offset = None
        self.close_key = None

        # === WIDGET CENTRAL ===
        central_widget = QWidget()
        central_layout = QVBoxLayout(central_widget)
        central_layout.setContentsMargins(0, 0, 0, 0)
        central_layout.setSpacing(0)
        self.setCentralWidget(central_widget)

        # === BARRE SUP√âRIEURE ===
        top_bar = QWidget()
        top_bar.setFixedHeight(60)
        top_bar.setStyleSheet("background-color: #1c1c1c;")
        top_layout = QHBoxLayout(top_bar)
        top_layout.setContentsMargins(10, 0, 10, 0)
        top_layout.setSpacing(10)

        self.update_btn = QPushButton("üåê")
        self.update_btn.setFixedSize(40, 40)
        self.update_btn.setStyleSheet("""
            QPushButton {
                background-color: transparent;
                color: white;
                font-size: 20px;
                border: none;
            }
            QPushButton:hover {
                color: #aaaaaa;
            }
        """)
        self.update_btn.clicked.connect(self.check_for_update)

        self.logo = QLabel()
        pixmap = QPixmap("image.png").scaled(45, 45, Qt.KeepAspectRatio, Qt.SmoothTransformation)
        self.logo.setPixmap(pixmap)
        self.logo.setFixedSize(50, 50)
        self.logo.mousePressEvent = self.open_settings

        self.title_label = QLabel("Crapule Optimisation V1.0.0")
        self.title_label.setStyleSheet("color: cyan; font-size: 18px; font-weight: bold;")
        self.title_label.setAlignment(Qt.AlignCenter)
        self.title_label.setFixedHeight(60)

        self.settings_btn = QPushButton("‚öôÔ∏è")
        self.settings_btn.setFixedSize(40, 40)
        self.settings_btn.setStyleSheet(self.update_btn.styleSheet())
        self.settings_btn.clicked.connect(self.open_settings)

        top_layout.addWidget(self.update_btn)
        top_layout.addWidget(self.logo)
        top_layout.addStretch()
        top_layout.addWidget(self.title_label)
        top_layout.addStretch()
        top_layout.addWidget(self.settings_btn)

        # === CONTENU PRINCIPAL ===
        main_content = QWidget()
        main_layout = QHBoxLayout(main_content)
        main_layout.setContentsMargins(0, 0, 0, 0)

        self.sidebar = QListWidget()
        self.sidebar.setFixedWidth(80)
        self.sidebar.setStyleSheet("""
            QListWidget {
                background-color: #1e1e1e;
                border: none;
                color: white;
                font-size: 22px;
                qproperty-alignment: AlignCenter;
            }
            QListWidget::item {
                padding: 25px 0;
            }
            QListWidget::item:selected {
                background-color: #44475a;
                border-radius: 10px;
            }
        """)
        self.sidebar.addItems(["üéÆ", "‚ö°", "üßπ", "üí†", "üîÑ"])
        self.sidebar.setFont(QFont("", 22))

        self.stack = QStackedWidget()
        self.init_pages()

        main_layout.addWidget(self.sidebar)
        main_layout.addWidget(self.stack)

        central_layout.addWidget(top_bar)
        central_layout.addWidget(main_content)

        self.sidebar.currentRowChanged.connect(self.stack.setCurrentIndex)
        self.setFocusPolicy(Qt.StrongFocus)

    def init_pages(self):
        for i in range(5):
            page = QWidget()
            layout = QVBoxLayout(page)
            layout.setContentsMargins(20, 20, 20, 20)
            layout.setSpacing(15)
            page.setStyleSheet("background-color: #2e2e2e; color: white;")

            # FPS
            if i == 0:
                items = [
                    "Activer Mode Haute Performance",
                    "D√©sactiver les effets visuels",
                    "Optimiser les param√®tres d'affichage",
                    "R√©duire la qualit√© des textures"
                ]
                callback = self.apply_fps_changes

            # Latence
            elif i == 1:
                items = [
                    "D√©sactiver l'optimisation de la mise en r√©seau",
                    "Optimiser la latence pour les jeux en ligne",
                    "D√©sactiver les applications en arri√®re-plan",
                    "Activer la gestion des priorit√©s syst√®me"
                ]
                callback = self.apply_latency_changes

            # Debloat
            elif i == 2:
                items = [
                    "D√©sinstaller logiciels inutiles",
                    "Supprimer les logiciels de d√©marrage inutiles",
                    "Nettoyer les caches des applications",
                    "D√©sactiver les services inutiles"
                ]
                callback = self.apply_debloat_changes

            # Entretien
            elif i == 3:
                self.temp_checkbox = QCheckBox("Supprimer les fichiers temporaires")
                self.temp_checkbox.setStyleSheet("color: white;")
                layout.addWidget(self.temp_checkbox)

                self.sfc_checkbox = QCheckBox("R√©parer les fichiers syst√®me (SFC)")
                self.sfc_checkbox.setStyleSheet("color: white;")
                layout.addWidget(self.sfc_checkbox)

                for txt in [
                    "Nettoyer les fichiers du navigateur",
                    "Effacer l'historique de navigation",
                    "Vider la corbeille"]:
                    box = QCheckBox(txt)
                    box.setStyleSheet("color: white;")
                    layout.addWidget(box)

                apply_btn = QPushButton("Appliquer")
                apply_btn.clicked.connect(self.apply_maintenance_changes)
                self.style_button(apply_btn)
                layout.addWidget(apply_btn)
                self.stack.addWidget(page)
                continue

            # Reset
            elif i == 4:
                reset_btn = QPushButton("R√©initialiser les optimisations")
                reset_btn.clicked.connect(self.reset_optimizations)
                self.style_button(reset_btn)
                layout.addWidget(reset_btn)
                self.stack.addWidget(page)
                continue

            for txt in items:
                box = QCheckBox(txt)
                box.setStyleSheet("color: white;")
                layout.addWidget(box)

            apply_btn = QPushButton("Appliquer")
            apply_btn.clicked.connect(callback)
            self.style_button(apply_btn)
            layout.addWidget(apply_btn)

            self.stack.addWidget(page)

    def open_settings(self, event=None):
        dialog = QDialog(self)
        dialog.setWindowTitle("Param√®tres")
        dialog.setFixedSize(300, 200)
        layout = QVBoxLayout(dialog)

        self.close_key_input = QLineEdit()
        self.close_key_input.setPlaceholderText("Entrez la touche de fermeture")
        layout.addWidget(self.close_key_input)

        apply_btn = QPushButton("Appliquer")
        apply_btn.clicked.connect(self.apply_close_key)
        layout.addWidget(apply_btn)

        dialog.exec_()

    def apply_close_key(self):
        self.close_key = self.close_key_input.text()
        QMessageBox.information(self, "Touche enregistr√©e", f"Touche d√©finie : {self.close_key}")

    def style_button(self, button):
        button.setStyleSheet("""
            QPushButton {
                background-color: #0078d4;
                color: white;
                font-size: 16px;
                border-radius: 5px;
                border: none;
                padding: 10px;
            }
            QPushButton:hover {
                background-color: #005a8d;
            }
        """)

    # === FONCTIONS D'ACTION ===
    def apply_fps_changes(self):
        QMessageBox.information(self, "FPS", "Optimisations FPS appliqu√©es.")

    def apply_latency_changes(self):
        QMessageBox.information(self, "Latence", "Optimisations Latence appliqu√©es.")

    def apply_debloat_changes(self):
        QMessageBox.information(self, "Debloat", "Optimisations Debloat appliqu√©es.")

    def apply_maintenance_changes(self):
        if self.temp_checkbox.isChecked():
            subprocess.run("del /s /f /q %temp%\\*", shell=True)
        if self.sfc_checkbox.isChecked():
            subprocess.run("sfc /scannow", shell=True)
        QMessageBox.information(self, "Entretien", "Nettoyage effectu√©.")

    def reset_optimizations(self):
        QMessageBox.information(self, "R√©initialisation", "Optimisations r√©initialis√©es.")

    # === MISE √Ä JOUR ===
    def check_for_update(self):
        try:
            response = requests.get(VERSION_URL)
            response.raise_for_status()
            nouvelle_version = response.text.strip()
            if nouvelle_version != VERSION_ACTUELLE:
                reply = QMessageBox.question(
                    self, "Mise √† jour disponible",
                    f"Nouvelle version {nouvelle_version} disponible. T√©l√©charger ?",
                    QMessageBox.Yes | QMessageBox.No
                )
                if reply == QMessageBox.Yes:
                    self.telecharger_et_installer()
            else:
                QMessageBox.information(self, "√Ä jour", "Aucune mise √† jour disponible.")
        except Exception as e:
            QMessageBox.critical(self, "Erreur", f"Erreur mise √† jour : {e}")

    def telecharger_et_installer(self):
        try:
            QMessageBox.information(self, "Mise √† jour", "T√©l√©chargement en cours...")
            r = requests.get(EXE_URL, stream=True)
            with open(NOM_EXE + ".new", 'wb') as f:
                for chunk in r.iter_content(chunk_size=8192):
                    f.write(chunk)
            current_exe = sys.argv[0]
            os.rename(current_exe, current_exe + ".bak")
            os.rename(NOM_EXE + ".new", current_exe)
            QMessageBox.information(self, "Termin√©", "Mise √† jour r√©ussie. Red√©marrage...")
            subprocess.Popen([current_exe])
            sys.exit()
        except Exception as e:
            QMessageBox.critical(self, "Erreur", f"√âchec mise √† jour : {e}")

    def keyPressEvent(self, event):
        if self.close_key and event.text() == self.close_key:
            self.close()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = CustomWindow()
    window.show()
    sys.exit(app.exec_())
